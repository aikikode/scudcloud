#!/usr/bin/env python3
import os
import sys

from PyQt4 import QtGui

INSTALL_DIR = '/opt/scudcloud/'
sys.path.append(INSTALL_DIR + 'lib')

from resources import Resources
from scudcloud import ScudCloud
from qsingleapplication import QSingleApplication

# If the environment variable XDG_CONFIG_HOME is non-empty, CONFIG_DIR is ignored
# and the configuration directory will be $XDG_CONFIG_HOME/scudcloud instead.
CONFIG_DIR = '~/.config/scudcloud'


def main():
    Resources.INSTALL_DIR = INSTALL_DIR
    app = QSingleApplication(sys.argv)
    app.setApplicationName(Resources.APP_NAME)
    app.setWindowIcon(QtGui.QIcon(Resources.get_path('scudcloud.png')))
    args = parse_arguments()
    ScudCloud.debug = args.debug
    ScudCloud.minimized = True if args.minimized is True else None
    ScudCloud.plugins = False if args.no_plugins is True else True
    try:
        settings_path = load_settings(args.confdir)
    except:
        print('Configuration directory {} could not be created! Exiting...'.format(args.confdir))
        raise SystemExit()
    main_app = ScudCloud(settings_path=settings_path)
    app.singleStart(main_app, 'scudcloud.pid')
    main_app.restore()
    sys.exit(app.exec_())


def load_settings(confdir):
    if not os.path.isdir(confdir):
        os.makedirs(confdir)
    if confdir not in sys.path:
        sys.path[0:0] = [confdir]
    return confdir


def parse_arguments():
    from argparse import ArgumentParser
    from os.path import expanduser

    if 'XDG_CONFIG_HOME' in os.environ and os.environ['XDG_CONFIG_HOME']:
        default_confdir = '{}/scudcloud'.format(os.environ['XDG_CONFIG_HOME'])
    else:
        default_confdir = CONFIG_DIR
    parser = ArgumentParser()
    parser.add_argument(
        '--confdir', dest='confdir', metavar='dir', default=default_confdir, help='change the configuration directory'
    )
    parser.add_argument(
        '--debug', dest='debug', type=bool, default=False, help='enable webkit debug console (default: False)'
    )
    parser.add_argument(
        '--minimized', dest='minimized', type=bool, default=False, help='start minimized to tray (default: False)'
    )
    parser.add_argument(
        '--no_plugins', dest='no_plugins', type=bool, default=False, help='disable web plugins (default: False)'
    )
    args = parser.parse_args()
    args.confdir = expanduser(args.confdir)
    return args


if __name__ == '__main__':
    main()
